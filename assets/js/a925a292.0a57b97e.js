"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7356],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return p}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(n),p=r,g=m["".concat(i,".").concat(p)]||m[p]||u[p]||o;return n?a.createElement(g,s(s({ref:t},d),{},{components:n})):a.createElement(g,s({ref:t},d))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8917:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),s=["components"],l={},i="@Guard",c={unversionedId:"decorators/general/guard",id:"decorators/general/guard",title:"@Guard",description:"You can use functions that are executed before your event to determine if it's executed. For example, if you want to apply a prefix to the messages, you can simply use the @Guard decorator.",source:"@site/docs/decorators/general/guard.md",sourceDirName:"decorators/general",slug:"/decorators/general/guard",permalink:"/docs/decorators/general/guard",editUrl:"https://github.com/oceanroleplay/discord.ts/edit/main/docs/docs/decorators/general/guard.md",tags:[],version:"current",lastUpdatedBy:"oceanroleplay",lastUpdatedAt:1650365528,formattedLastUpdatedAt:"4/19/2022",frontMatter:{},sidebar:"docSidebar",previous:{title:"@Discord",permalink:"/docs/decorators/general/discord"},next:{title:"@Guild",permalink:"/docs/decorators/general/guild"}},d={},u=[{value:"Supported with",id:"supported-with",level:2},{value:"Example",id:"example",level:2},{value:"Guards for @Discord",id:"guards-for-discord",level:2},{value:"Global guards",id:"global-guards",level:2},{value:"The guard functions",id:"the-guard-functions",level:2},{value:"Guard data",id:"guard-data",level:3},{value:"Access client from decorator",id:"access-client-from-decorator",level:3},{value:"Access guard data from decorator",id:"access-guard-data-from-decorator",level:3},{value:"Signature",id:"signature",level:2},{value:"Parameters",id:"parameters",level:2},{value:"guard",id:"guard-1",level:3},{value:"Make changes to",id:"make-changes-to",level:2}],m={toc:u};function p(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"guard"},"@Guard"),(0,o.kt)("p",null,"You can use functions that are executed before your event to determine if it's executed. For example, if you want to apply a prefix to the messages, you can simply use the ",(0,o.kt)("inlineCode",{parentName:"p"},"@Guard")," decorator."),(0,o.kt)("p",null,"The order of execution of the guards is done according to their position in the list, so they will be executed in order (from top to bottom)."),(0,o.kt)("h2",{id:"supported-with"},"Supported with"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../gui/button-component"},"@ButtonComponent")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../gui/context-menu"},"@ContextMenu")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"./discord"},"@Discord")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"./on"},"@On")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"./once"},"@Once")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../gui/select-menu-component"},"@SelectMenuComponent")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../commands/simple-command"},"@SimpleCommand")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../commands/slash"},"@Slash"))),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Discord, On, Client, Guard } from "discordx";\nimport { NotBot } from "./NotBot";\nimport { Prefix } from "./Prefix";\n\n@Discord()\nclass Example {\n  @On("messageCreate")\n  @Guard(\n    NotBot, // You can use multiple guard functions, they are executed in the same order!\n    Prefix("!")\n  )\n  async onMessage([message]: ArgsOf<"messageCreate">) {\n    switch (message.content.toLowerCase()) {\n      case "hello":\n        message.reply("Hello!");\n        break;\n      default:\n        message.reply("Command not found");\n        break;\n    }\n  }\n}\n')),(0,o.kt)("h2",{id:"guards-for-discord"},"Guards for @Discord"),(0,o.kt)("p",null,"When you use ",(0,o.kt)("inlineCode",{parentName:"p"},"@Guard")," along with ",(0,o.kt)("inlineCode",{parentName:"p"},"@Discord")," the guard is applied to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Each ",(0,o.kt)("inlineCode",{parentName:"li"},"@SimpleCommand")," of the class"),(0,o.kt)("li",{parentName:"ul"},"Each ",(0,o.kt)("inlineCode",{parentName:"li"},"@Slash")," of the class"),(0,o.kt)("li",{parentName:"ul"},"Each ",(0,o.kt)("inlineCode",{parentName:"li"},"@On")," of the class"),(0,o.kt)("li",{parentName:"ul"},"Each ",(0,o.kt)("inlineCode",{parentName:"li"},"@Once")," of the class")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"It's executed before the members's guards")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Discord, On, Client, Guard, SimpleCommandMessage } from "discordx";\nimport { NotBot } from "./NotBot";\nimport { Prefix } from "./Prefix";\n\n@Discord()\n@Guard(NotBot, Prefix("!"))\nclass Example {\n  @On("messageCreate")\n  message([message]: ArgsOf<"messageCreate">) {\n    //...\n  }\n\n  @SimpleCommand("hello")\n  message(command: SimpleCommandMessage) {\n    //...\n  }\n}\n')),(0,o.kt)("h2",{id:"global-guards"},"Global guards"),(0,o.kt)("p",null,"When can setup some guards globally"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Global guards are executed before @Discord guards")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'// Use the Client that are provided by discordx NOT discord.js\nimport { Client } from "discordx";\n\nasync function start() {\n  const client = new Client({\n    botId: "test",\n    silent: false,\n    guards: [NotBot, Prefix("!")],\n  });\n\n  await client.login("YOUR_TOKEN");\n}\n\nstart();\n')),(0,o.kt)("h2",{id:"the-guard-functions"},"The guard functions"),(0,o.kt)("p",null,"Here is a simple example of a guard function (the payload and the client instance are injected like for events)"),(0,o.kt)("p",null,"Guards work like ",(0,o.kt)("inlineCode",{parentName:"p"},"Koa"),"'s, it's a function passed in parameter (third parameter in the guard function) and you will have to call if the guard is passed."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"If ",(0,o.kt)("inlineCode",{parentName:"strong"},"next")," isn't called the next guard (or the main method) will not be executed")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { GuardFunction, ArgsOf } from "discordx";\n\nexport const NotBot: GuardFunction<ArgsOf<"messageCreate">> = async (\n  [message],\n  client,\n  next\n) => {\n  if (client.user.id !== message.author.id) {\n    await next();\n  }\n};\n')),(0,o.kt)("p",null,'If you have to indicate parameters for a guard function you can simple use the "function that returns a function" pattern like this:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { CommandInteraction } from "discord.js";\nimport { GuardFunction } from "discordx";\n\nexport function Prefix(text: string, replace: boolean = true) {\n  const guard: GuardFunction<\n    ArgsOf<"messageCreate"> | CommandInteraction\n  > = async (arg, client, next) => {\n    const argObj = arg instanceof Array ? arg[0] : arg;\n    if (argObj instanceof CommandInteraction) {\n      await next();\n    } else {\n      const message = argObj;\n      const startWith = message.content.startsWith(text);\n      if (replace) {\n        message.content = message.content.replace(text, "");\n      }\n      if (startWith) {\n        await next();\n      }\n    }\n  };\n\n  return guard;\n}\n')),(0,o.kt)("h3",{id:"guard-data"},"Guard data"),(0,o.kt)("p",null,"As 4th parameter you receive a basic empty object that can be used to transmit data between guard and with your main method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import type { ArgsOf } from "discordx";\nimport { GuardFunction, SimpleCommandMessage } from "discordx";\nimport {\n  ButtonInteraction,\n  CommandInteraction,\n  ContextMenuInteraction,\n  Message,\n  MessageReaction,\n  SelectMenuInteraction,\n  VoiceState,\n} from "discord.js";\n\n// Example by @AndyClausen\n// Modified by @oceanroleplay\n\nexport const NotBot: GuardFunction<\n  | ArgsOf<"messageCreate" | "messageReactionAdd" | "voiceStateUpdate">\n  | CommandInteraction\n  | ContextMenuInteraction\n  | SelectMenuInteraction\n  | ButtonInteraction\n  | SimpleCommandMessage\n> = async (arg, client, next, guardData) => {\n  const argObj = arg instanceof Array ? arg[0] : arg;\n  const user =\n    argObj instanceof CommandInteraction\n      ? argObj.user\n      : argObj instanceof MessageReaction\n      ? argObj.message.author\n      : argObj instanceof VoiceState\n      ? argObj.member?.user\n      : argObj instanceof Message\n      ? argObj.author\n      : argObj instanceof SimpleCommandMessage\n      ? argObj.message.author\n      : argObj instanceof CommandInteraction ||\n        argObj instanceof ContextMenuInteraction ||\n        argObj instanceof SelectMenuInteraction ||\n        argObj instanceof ButtonInteraction\n      ? argObj.member?.user\n      : argObj.message.author;\n  if (!user?.bot) {\n    guardData.message = "the NotBot guard passed";\n    await next();\n  }\n};\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Discord, Slash, Client, Guard } from "discordx";\nimport { CommandInteraction } from "discord.js";\nimport { NotBot } from "./NotBot";\n\n@Discord()\nclass Example {\n  @Slash()\n  @Guard(NotBot)\n  async hello(\n    interaction: CommandInteraction,\n    client: Client,\n    guardData: { message: string }\n  ) {\n    console.log(guardData.message);\n    // > the NotBot guard passed\n  }\n}\n')),(0,o.kt)("h3",{id:"access-client-from-decorator"},"Access client from decorator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'@Discord()\nclass Example {\n  @SimpleCommand("my-cmd")\n  async myCmd(command: SimpleCommandMessage, client: Client) {\n    command.message.reply("Hello :wave_tone1:");\n  }\n}\n')),(0,o.kt)("h3",{id:"access-guard-data-from-decorator"},"Access guard data from decorator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'@Discord()\nclass Example {\n  @SimpleCommand("my-cmd")\n  async myCmd(command: SimpleCommandMessage, client: Client, guardData: any) {\n    command.message.reply("Hello :wave_tone1:");\n  }\n}\n')),(0,o.kt)("h2",{id:"signature"},"Signature"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"Guard<Type = any, DataType = any>(\n  ...fns: GuardFunction<Type, DataType>[]\n);\n")),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("h3",{id:"guard-1"},"guard"),(0,o.kt)("p",null,"Array of guard functions."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"type"),(0,o.kt)("th",{parentName:"tr",align:null},"default"),(0,o.kt)("th",{parentName:"tr",align:null},"required"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"GuardFunction","[ ]"),(0,o.kt)("td",{parentName:"tr",align:null},"[ ]"),(0,o.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,o.kt)("h2",{id:"make-changes-to"},"Make changes to"),(0,o.kt)("p",null,"It either extends or overwrites data configured in below decorators, however, the order of decorators matters."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/decorators/gui/button-component"},"@ButtonComponent")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/decorators/gui/select-menu-component"},"@SelectMenuComponent")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/decorators/general/discord"},"@Discord")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/decorators/general/on"},"@On")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/decorators/general/once"},"@Once")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/decorators/commands/simple-command"},"@SimpleCommand")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/decorators/commands/slash"},"@Slash")))}p.isMDXComponent=!0}}]);